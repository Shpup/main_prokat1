@include('layouts.navigation')
@vite(['resources/css/app.css', 'resources/css/lk-about.css', 'resources/js/app.js', 'resources/js/lk-about.js'])

<div class="max-w-[1800px] mx-auto px-8 py-6">
  @include('profile.partials._tabs')

  <!-- –ë–ª–æ–∫ 1 ‚Äî –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
  <section class="bg-white rounded-xl shadow p-6 mb-6">
    <header class="flex items-center gap-2 mb-4 text-lg font-semibold text-gray-900">
      <span>üë§</span>
      <span>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
    </header>
         <form id="profileForm" action="{{ route('profile.about.updateInfo') }}" method="post">@csrf @method('PUT')
                           <div class="flex items-start gap-6">
          <div class="flex flex-col items-center gap-2">
            <div class="w-24 h-24 rounded-full bg-gray-100 grid place-items-center text-3xl text-gray-400 overflow-hidden" id="profilePhotoContainer">
              @if($u->profile && $u->profile->photo_path)
                <img src="{{ asset('storage/' . $u->profile->photo_path) }}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="w-full h-full object-cover">
              @else
                <span>üë§</span>
              @endif
            </div>
            <input type="file" id="profilePhotoInput" accept="image/*" class="hidden">
            <button type="button" id="uploadPhotoBtn" class="px-3 py-1.5 rounded-md bg-blue-600 text-white hover:bg-blue-700">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</button>
          </div>
          <div class="flex-1">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
               <div>
                 <label class="block text-sm text-gray-700 mb-1">–§–∞–º–∏–ª–∏—è</label>
                 <input type="text" name="last_name" value="{{ old('last_name',$u->profile->last_name ?? '') }}" class="w-full border border-gray-300 rounded-md px-3 py-2">
               </div>
               <div>
                 <label class="block text-sm text-gray-700 mb-1">–ò–º—è</label>
                 <input type="text" name="first_name" value="{{ old('first_name',$u->profile->first_name ?? '') }}" class="w-full border border-gray-300 rounded-md px-3 py-2">
               </div>
               <div>
                 <label class="block text-sm text-gray-700 mb-1">–û—Ç—á–µ—Å—Ç–≤–æ</label>
                 <input type="text" name="middle_name" value="{{ old('middle_name',$u->profile->middle_name ?? '') }}" class="w-full border border-gray-300 rounded-md px-3 py-2">
               </div>
               <div>
                 <label class="block text-sm text-gray-700 mb-1">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                 <input type="date" name="birth_date" value="{{ old('birth_date',$u->profile->birth_date ? $u->profile->birth_date->format('Y-m-d') : '') }}" class="w-full border border-gray-300 rounded-md px-3 py-2">
               </div>
               <div>
                 <label class="block text-sm text-gray-700 mb-1">–ì–æ—Ä–æ–¥</label>
                 <input type="text" name="city" value="{{ old('city',$u->profile->city ?? '') }}" class="w-full border border-gray-300 rounded-md px-3 py-2">
               </div>
            </div>
            <div class="mt-4 flex justify-end">
              <button type="submit" class="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </div>
          </div>
        </div>
    </form>
  </section>

     <!-- –ë–ª–æ–∫ 2 ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç—ã -->
   <section class="bg-white rounded-xl shadow p-6 mb-6">
     <header class="flex items-center justify-between mb-4">
       <div class="flex items-center gap-2 text-lg font-semibold text-gray-900">
         <span>üìû</span>
         <span>–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>
       </div>
       <div class="flex items-center gap-2">
         <button type="button" id="addPhoneBtn" class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50">+ –¢–µ–ª–µ—Ñ–æ–Ω</button>
         <button type="button" id="addEmailBtn" class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50">+ E‚Äëmail</button>
       </div>
     </header>

     <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
       <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã -->
       <div>
         <h3 class="text-md font-semibold text-gray-800 mb-3">–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
         
         @if(!$u->email && !$u->phone)
           <div class="text-center text-gray-600 py-8">
             <div class="text-4xl mb-2">üì≠</div>
             <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
           </div>
         @endif

         <div class="space-y-3">
           <!-- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω -->
                       <div class="contact-item border border-gray-200 rounded-lg p-4 bg-gray-50 min-h-[80px]" data-type="primary" data-contact-type="phone">
             <div class="contact-view flex items-start justify-between gap-3">
               <div class="flex items-center gap-3">
                 <div class="text-xl">üì±</div>
                 <div>
                   <div class="font-semibold text-gray-900">{{ $u->phone ?: '–ù–µ —É–∫–∞–∑–∞–Ω' }}</div>
                   @if($u->phone)
                     <div class="text-sm text-gray-500">–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω</div>
                   @endif
                 </div>
               </div>
               <div class="flex items-center gap-2">
                  @if(auth()->user()->hasRole('admin'))
                 <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                  @endif
               </div>
             </div>
             
             @if(auth()->user()->hasRole('admin'))
             <div class="contact-edit hidden mt-3">
               <form class="contact-form" action="{{ route('profile.primary.updatePhone') }}" method="post" data-contact-type="phone">@csrf @method('PUT')
                 <div class="space-y-3">
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                       <input type="tel" name="phone" value="{{ $u->phone }}" class="w-full border border-gray-300 rounded-md px-3 py-2 phone-mask" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞">
                   </div>
                 </div>
                 <div class="mt-3 flex justify-end gap-2">
                   <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                   <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                 </div>
               </form>
             </div>
             @endif
           </div>
           
           <!-- –û—Å–Ω–æ–≤–Ω–æ–π email -->
                       <div class="contact-item border border-gray-200 rounded-lg p-4 bg-gray-50 min-h-[80px]" data-type="primary" data-contact-type="email">
             <div class="contact-view flex items-start justify-between gap-3">
               <div class="flex items-center gap-3">
                 <div class="text-xl">‚úâÔ∏è</div>
                 <div>
                   <div class="font-semibold text-gray-900">{{ $u->email ?: '–ù–µ —É–∫–∞–∑–∞–Ω' }}</div>
                   @if($u->email)
                     <div class="text-sm text-gray-500">–û—Å–Ω–æ–≤–Ω–æ–π email</div>
                   @endif
                 </div>
               </div>
               <div class="flex items-center gap-2">
                  @if(auth()->user()->hasRole('admin'))
                 <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                  @endif
               </div>
             </div>
             
             @if(auth()->user()->hasRole('admin'))
             <div class="contact-edit hidden mt-3">
               <form class="contact-form" action="{{ route('profile.primary.updateEmail') }}" method="post" data-contact-type="email">@csrf @method('PUT')
                 <div class="space-y-3">
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                       <input type="email" name="email" id="primaryEmailInput" class="w-full border border-gray-300 rounded-md px-3 py-2" required>
                   </div>
                 </div>
                 <div class="mt-3 flex justify-end gap-2">
                   <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                   <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                 </div>
               </form>
             </div>
             @endif
           </div>
         </div>
       </div>

       <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã -->
       <div>
         <h3 class="text-md font-semibold text-gray-800 mb-3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
         
                             <div class="space-y-3" id="additionalContacts">
                                             @if(($u->phones->whereNotNull('value')->count() + $u->emails->whereNotNull('value')->count()) === 0)
                        <div class="text-center text-gray-600 py-8">
                          <div class="text-4xl mb-2">üì≠</div>
                          <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                        </div>
                      @endif
                       @foreach($u->phones as $p)
              @if($p->value)
                            <div class="contact-item border border-gray-200 rounded-lg p-4 bg-gray-50 hover:shadow-sm transition min-h-[80px]" data-type="additional" data-contact-type="phone" data-id="{{ $p->id }}">
                <div class="contact-view flex items-start justify-between gap-3">
                  <div class="flex items-center gap-3">
                    <div class="text-xl">üì±</div>
                    <div>
                      <div class="font-semibold text-gray-900">{{ $p->value }}</div>
                      @if($p->comment)
                        <div class="text-sm text-gray-500">{{ $p->comment }}</div>
                      @endif
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button type="button" class="contact-delete-btn text-red-600 hover:text-red-700" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
                  </div>
                </div>
                
                <div class="contact-edit hidden mt-3">
                  <form class="contact-form" action="{{ route('profile.phones.update', $p) }}" method="post" data-contact-type="phone">@csrf @method('PUT')
                    <div class="space-y-3">
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                        <input type="tel" name="value" value="{{ $p->value }}" class="w-full border border-gray-300 rounded-md px-3 py-2 phone-mask" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" required>
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                        <input type="text" name="comment" value="{{ $p->comment }}" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                      </div>
                    </div>
                    <div class="mt-3 flex justify-end gap-2">
                      <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                      <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                  </form>
                </div>
              </div>
              @endif
            @endforeach

                       @foreach($u->emails as $e)
              @if($e->value)
                            <div class="contact-item border border-gray-200 rounded-lg p-4 bg-gray-50 hover:shadow-sm transition min-h-[80px]" data-type="additional" data-contact-type="email" data-id="{{ $e->id }}">
                <div class="contact-view flex items-start justify-between gap-3">
                  <div class="flex items-center gap-3">
                    <div class="text-xl">‚úâÔ∏è</div>
                    <div>
                      <div class="font-semibold text-gray-900">{{ $e->value }}</div>
                      @if($e->comment)
                        <div class="text-sm text-gray-500">{{ $e->comment }}</div>
                      @endif
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button type="button" class="contact-delete-btn text-red-600 hover:text-red-700" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
                  </div>
                </div>
                
                <div class="contact-edit hidden mt-3">
                  <form class="contact-form" action="{{ route('profile.emails.update', $e) }}" method="post" data-contact-type="email">@csrf @method('PUT')
                    <div class="space-y-3">
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" name="value" value="{{ $e->value }}" class="w-full border border-gray-300 rounded-md px-3 py-2" required>
                      </div>
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                        <input type="text" name="comment" value="{{ $e->comment }}" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                      </div>
                      <div>
                        <label class="inline-flex items-center gap-2 text-sm text-gray-700">
                          <input type="checkbox" name="is_primary" value="1" {{ $e->is_primary ? 'checked' : '' }}> –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        </label>
                      </div>
                    </div>
                    <div class="mt-3 flex justify-end gap-2">
                      <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                      <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                  </form>
                </div>
              </div>
              @endif
            @endforeach
         </div>
       </div>
     </div>
   </section>

     <!-- –ë–ª–æ–∫ 3 ‚Äî –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å -->
   <section class="bg-white rounded-xl shadow p-6 mb-6">
     <header class="flex items-center gap-2 mb-4 text-lg font-semibold text-gray-900">
       <span>üîê</span>
       <span>–£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å</span>
     </header>
     
     <!-- –õ–æ–≥–∏–Ω -->
     <div class="mb-6">
       <label class="block text-sm text-gray-700 mb-2">–õ–æ–≥–∏–Ω (email):</label>
       <div id="loginDisplay" class="flex items-center justify-between p-3 bg-gray-50 border border-gray-200 rounded-md">
         <span class="text-gray-700">{{ $u->login ?? $u->email }}</span>
         @if(auth()->user()->hasRole('admin'))
         <button type="button" id="editLoginBtn" class="text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
         @endif
       </div>
       
               @if(auth()->user()->hasRole('admin'))
       <div id="loginEdit" class="hidden">
         <form id="loginForm" action="{{ route('profile.about.updateLogin') }}" method="post">@csrf @method('PUT')
           <div class="flex items-center gap-3">
                <input type="email" name="email" id="loginEmailInput" class="flex-1 border border-gray-300 rounded-md px-3 py-2" required>
             <button type="submit" class="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
             <button type="button" id="cancelLoginBtn" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50">–û—Ç–º–µ–Ω–∏—Ç—å</button>
           </div>
         </form>
       </div>
        @endif
     </div>
     
     <!-- –ü–∞—Ä–æ–ª—å -->
     <div>
         <label class="block text-sm font-medium text-gray-700 mb-2">–ü–∞—Ä–æ–ª—å:</label>
         <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 shadow-sm">
             <div class="flex items-center justify-between">
                 <div class="flex-1">
                     <div class="text-sm text-gray-900">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</div>
                     <div class="text-xs text-gray-500 mt-1">–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞—â–∏—â—ë–Ω</div>
                 </div>
                 <button type="button" onclick="openChangePasswordModal()" class="text-orange-500 hover:text-orange-600 transition-colors w-8 text-center">
                     <span class="text-lg">‚úèÔ∏è</span>
                 </button>
             </div>
         </div>
     </div>
   </section>

     <!-- –ë–ª–æ–∫ 4 ‚Äî –î–æ–∫—É–º–µ–Ω—Ç—ã -->
   <section class="bg-white rounded-xl shadow p-6 mb-6">
     <header class="flex items-center justify-between mb-4">
       <div class="flex items-center gap-2 text-lg font-semibold text-gray-900">
         <span>üìÑ</span>
         <span>–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
       </div>
       <button type="button" id="addDocumentBtn" class="px-3 py-1.5 rounded-md bg-blue-600 text-white hover:bg-blue-700">+ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</button>
     </header>

                 <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
     @if($u->documents->count() === 0)
          <div class="text-center text-gray-600 py-10 col-span-full">
         <div class="text-5xl mb-3">üóÇÔ∏è</div>
         <div>–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
       </div>
     @endif
       @foreach($u->documents as $d)
         <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition">
           <div class="flex items-start justify-between mb-3">
             <div class="flex items-center gap-2">
               <div class="text-2xl">
                 @if($d->type === 'passport') üìÑ
                 @elseif($d->type === 'foreign_passport') üõÇ
                 @elseif($d->type === 'driver_license') üöó
                 @else üìã
                 @endif
               </div>
               <div>
                 <div class="font-semibold text-gray-900">{{ __('types.'.$d->type) }}</div>
                 <div class="text-sm text-gray-600">
                   @if($d->files && count($d->files) > 0)
                     üì∑ {{ count($d->files) }} —Ñ–æ—Ç–æ
                   @else
                     –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                   @endif
                 </div>
               </div>
             </div>
             <div class="text-green-600 text-lg">‚úî</div>
           </div>
           
           <div class="flex items-center gap-2">
             <button class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50 text-sm" data-view-doc="{{ $d->id }}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
               üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
             </button>
             <button class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50 text-sm" data-edit-doc="{{ $d->id }}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
               ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
             </button>
             <button class="px-3 py-1.5 rounded-md bg-red-600 text-white hover:bg-red-700 text-sm" data-delete-doc="{{ $d->id }}" title="–£–¥–∞–ª–∏—Ç—å">
               üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
             </button>
           </div>
           
           <template class="payload">
             {!! json_encode([
               'id'=>$d->id,'type'=>$d->type,'files'=>$d->files
             ]) !!}
           </template>
         </div>
       @endforeach
     </div>
   </section>



     <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ -->
   <div id="contactDeleteModal" class="fixed inset-0 z-50 hidden">
     <div class="absolute inset-0 bg-black/40" data-close></div>
     <div class="relative z-10 max-w-md mx-auto mt-24 bg-white rounded-xl shadow-lg p-6">
       <div class="text-center">
         <div class="text-4xl mb-4">‚ö†Ô∏è</div>
         <h3 class="text-lg font-semibold mb-2">–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?</h3>
         <p class="text-gray-600 mb-6">–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</p>
         <div class="flex justify-center gap-3">
           <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–û—Ç–º–µ–Ω–∞</button>
           <button type="button" id="confirmContactDeleteBtn" class="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700">–£–¥–∞–ª–∏—Ç—å</button>
         </div>
       </div>
     </div>
   </div>

       <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
  <div id="photoDeleteModal" class="fixed inset-0 z-[60] hidden">
    <div class="absolute inset-0 bg-black/40" data-close></div>
    <div class="relative z-10 max-w-md mx-auto mt-24 bg-white rounded-xl shadow-lg p-6">
      <div class="text-center">
        <div class="text-4xl mb-4">üóëÔ∏è</div>
        <h3 class="text-lg font-semibold mb-2">–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?</h3>
        <p class="text-gray-600 mb-2">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è "<span id="photoDeleteName" class="font-medium text-gray-900"></span>" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞</p>
        <p class="text-gray-500 mb-6 text-sm">–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</p>
        <div class="flex justify-center gap-3">
          <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–û—Ç–º–µ–Ω–∞</button>
          <button type="button" id="confirmPhotoDeleteBtn" class="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      </div>
    </div>
  </div>



     <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ -->
   <div id="docTypeModal" class="fixed inset-0 z-50 hidden">
     <div class="absolute inset-0 bg-black/40" data-close></div>
     <div class="relative z-10 max-w-md mx-auto mt-24 bg-white rounded-xl shadow-lg p-6">
       <div class="flex items-start justify-between mb-4">
         <div class="text-lg font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</div>
         <button class="text-gray-500" data-close>‚úï</button>
       </div>
       <div class="space-y-3">
         <button type="button" class="w-full p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left" data-doc-type="passport">
           <div class="flex items-center gap-3">
             <div class="text-2xl">üìÑ</div>
             <div>
               <div class="font-semibold">–ü–∞—Å–ø–æ—Ä—Ç –†–§</div>
               <div class="text-sm text-gray-600">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ –†–§</div>
             </div>
           </div>
         </button>
         <button type="button" class="w-full p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left" data-doc-type="foreign_passport">
           <div class="flex items-center gap-3">
             <div class="text-2xl">üõÇ</div>
             <div>
               <div class="font-semibold">–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç</div>
               <div class="text-sm text-gray-600">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞</div>
             </div>
           </div>
         </button>
         <button type="button" class="w-full p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left" data-doc-type="driver_license">
           <div class="flex items-center gap-3">
             <div class="text-2xl">üöó</div>
             <div>
               <div class="font-semibold">–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞</div>
               <div class="text-sm text-gray-600">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤</div>
             </div>
           </div>
         </button>
       </div>
       <div class="mt-6 flex justify-end">
         <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–û—Ç–º–µ–Ω–∞</button>
       </div>
     </div>
   </div>

   <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ -->
   <div id="docFormModal" class="fixed inset-0 z-50 hidden">
     <div class="absolute inset-0 bg-black/40" data-close></div>
     <div class="relative z-10 max-w-2xl mx-auto mt-12 bg-white rounded-xl shadow-lg p-6 max-h-[90vh] overflow-y-auto">
       <div class="flex items-start justify-between mb-4">
         <div class="text-lg font-semibold">
           <span id="docFormTitle">–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</span>
           <div class="text-sm font-normal text-gray-600" id="docFormSubtitle"></div>
         </div>
         <button class="text-gray-500" data-close>‚úï</button>
       </div>
       
       <form id="docForm" method="post" enctype="multipart/form-data" action="{{ route('profile.documents.store') }}">
         @csrf
         <input type="hidden" name="_method" value="POST">
         <input type="hidden" name="type" id="docType">
         
         <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ -->
         <div class="mt-4">
           <label class="block text-sm font-medium text-gray-700 mb-1">–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</label>
           <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
             <input type="file" name="files[]" id="docFiles" multiple accept=".jpg,.jpeg,.png" class="hidden">
             <label for="docFiles" class="cursor-pointer">
               <div class="text-4xl mb-2">üì∑</div>
               <div class="text-sm text-gray-600">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>
               <div class="text-xs text-gray-500 mt-1">JPG, PNG –¥–æ 10 –ú–ë –∫–∞–∂–¥–∞—è</div>
             </label>
           </div>
           <div id="filePreview" class="mt-3 space-y-2"></div>
         </div>
         
         <div class="mt-6 flex justify-end gap-2">
           <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–û—Ç–º–µ–Ω–∞</button>
           <button type="submit" class="px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
         </div>
       </form>
     </div>
   </div>

   <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ -->
   <div id="docViewModal" class="fixed inset-0 z-50 hidden">
     <div class="absolute inset-0 bg-black/40" data-close></div>
     <div class="relative z-10 max-w-4xl mx-auto mt-12 bg-white rounded-xl shadow-lg p-6 max-h-[90vh] overflow-y-auto">
       <div class="flex items-start justify-between mb-4">
         <div class="text-lg font-semibold">
           <span id="docViewTitle">–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</span>
         </div>
         <button class="text-gray-500" data-close>‚úï</button>
       </div>
       
       <!-- –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π -->
         <div>
         <div id="docViewGallery" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
             <!-- –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è JavaScript -->
         </div>
       </div>
       
       <div class="mt-6 flex justify-end">
         <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–ó–∞–∫—Ä—ã—Ç—å</button>
       </div>
     </div>
   </div>

   <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è -->
   <div id="docDeleteModal" class="fixed inset-0 z-50 hidden">
     <div class="absolute inset-0 bg-black/40" data-close></div>
     <div class="relative z-10 max-w-md mx-auto mt-24 bg-white rounded-xl shadow-lg p-6">
       <div class="text-center">
         <div class="text-4xl mb-4">‚ö†Ô∏è</div>
         <h3 class="text-lg font-semibold mb-2">–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?</h3>
         <p class="text-gray-600 mb-6">–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</p>
         <div class="flex justify-center gap-3">
           <button type="button" class="px-4 py-2 rounded-md border border-gray-300 hover:bg-gray-50" data-close>–û—Ç–º–µ–Ω–∞</button>
           <button type="button" id="confirmDeleteBtn" class="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700">–£–¥–∞–ª–∏—Ç—å</button>
         </div>
       </div>
     </div>
   </div>



  <!-- mini-scripts: –º–æ–¥–∞–ª–∫–∏ –∏ doc-—Ä–µ–¥–∞–∫—Ç–æ—Ä -->
     <script>
     document.addEventListener('DOMContentLoaded', () => {
       // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
       function showNotification(message, type = 'info') {
         // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
         const notification = document.createElement('div');
         notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 translate-x-full`;
         
         // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
         if (type === 'info') {
           notification.className += ' bg-blue-500 text-white';
         } else if (type === 'success') {
           notification.className += ' bg-green-500 text-white';
         } else if (type === 'error') {
           notification.className += ' bg-red-500 text-white';
         }
         
         notification.innerHTML = `
           <div class="flex items-center justify-between">
             <div class="flex items-center">
               <span class="mr-2">${type === 'info' ? '‚ÑπÔ∏è' : type === 'success' ? '‚úÖ' : '‚ùå'}</span>
               <span class="text-sm">${message}</span>
             </div>
             <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">‚úï</button>
           </div>
         `;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
         document.body.appendChild(notification);
         
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
         setTimeout(() => {
           notification.classList.remove('translate-x-full');
         }, 100);
         
         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
         setTimeout(() => {
           notification.classList.add('translate-x-full');
           setTimeout(() => {
             if (notification.parentElement) {
               notification.remove();
             }
           }, 300);
         }, 5000);
       }
      const bindModal = (openBtn, modalId) => {
        const modal = document.getElementById(modalId);
        if (!modal) return;
        if (openBtn) openBtn.addEventListener('click', () => modal.classList.remove('hidden'));
         modal.querySelectorAll('[data-close]').forEach(el => el.addEventListener('click', () => {
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
           if (modal && modal.parentNode) {
             modal.classList.add('hidden');
           }
         }));
         modal.addEventListener('click', (e) => { 
           if (e.target === modal && modal && modal.parentNode) {
             modal.classList.add('hidden'); 
           }
         });
      };
      bindModal(document.getElementById('addPhoneBtn'), 'modalAddPhone');
      bindModal(document.getElementById('addEmailBtn'), 'modalAddEmail');

             // –î–æ–∫—É–º–µ–Ω—Ç—ã: –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
       const addDocumentBtn = document.getElementById('addDocumentBtn');
       const docTypeModal = document.getElementById('docTypeModal');
       const docFormModal = document.getElementById('docFormModal');
       const docViewModal = document.getElementById('docViewModal');
       const docDeleteModal = document.getElementById('docDeleteModal');
       const docForm = document.getElementById('docForm');
       const docFiles = document.getElementById('docFiles');
       const filePreview = document.getElementById('filePreview');
       const docViewGallery = document.getElementById('docViewGallery');

       // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
       if (addDocumentBtn) {
         addDocumentBtn.addEventListener('click', () => {
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
             if (addDocumentBtn.disabled) {
               return;
             }
             
             // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
             updateAddDocumentButton();
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
             if (addDocumentBtn.disabled) {
               return;
             }
             

             
           docTypeModal.classList.remove('hidden');
         });
       }

       // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
       document.querySelectorAll('[data-doc-type]').forEach(btn => {
         btn.addEventListener('click', () => {
           const type = btn.getAttribute('data-doc-type');
           const typeNames = {
             'passport': '–ü–∞—Å–ø–æ—Ä—Ç –†–§',
             'foreign_passport': '–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç',
             'driver_license': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞'
           };
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
           const existingDocuments = document.querySelectorAll('[data-view-doc]');
           let existingDocument = null;
           let existingDocumentId = null;
           
           existingDocuments.forEach(docBtn => {
             const documentElement = docBtn.closest('.border');
             const payload = documentElement.querySelector('template.payload');
             if (payload) {
               try {
                 const data = JSON.parse(payload.innerHTML.trim());
                 if (data.type === type) {
                   existingDocument = documentElement;
                   existingDocumentId = data.id;
                 }
               } catch (e) {
                 console.error('Error parsing document data:', e);
               }
             }
           });
           
           // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
           if (existingDocument && existingDocumentId) {
             // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
             const payload = existingDocument.querySelector('template.payload');
             const data = JSON.parse(payload.innerHTML.trim());
             
             // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
             document.getElementById('docType').value = type;
             document.getElementById('docFormTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É';
             document.getElementById('docFormSubtitle').textContent = typeNames[type];
             
             // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action –∏ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
             docForm.setAttribute('action', `/profile/documents/${existingDocumentId}`);
             docForm.setAttribute('method', 'POST');
             
             // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ _method –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–∞
             let methodField = docForm.querySelector('input[name="_method"]');
             if (!methodField) {
               methodField = document.createElement('input');
               methodField.type = 'hidden';
               methodField.name = '_method';
               docForm.appendChild(methodField);
             }
             methodField.value = 'PUT';
             
             // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø—Ä–µ–≤—å—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
             docForm.reset();
             docFiles.value = '';
             filePreview.innerHTML = '';
             
             // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–µ _method –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
             if (methodField) {
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
               const existingMethodField = docForm.querySelector('input[name="_method"]');
               if (!existingMethodField) {
                 docForm.appendChild(methodField);
               } else {
                 // –ï—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                 existingMethodField.value = 'PUT';
               }
             }
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
             displayExistingPhotos(data.files || [], existingDocumentId);
             
             // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
             docTypeModal.classList.add('hidden');
             docFormModal.classList.remove('hidden');
             return;
           }
           
           // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
           
           // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
           document.getElementById('docType').value = type;
           document.getElementById('docFormTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
           document.getElementById('docFormSubtitle').textContent = typeNames[type];
           
           // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action –∏ –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
           docForm.setAttribute('action', '{{ route("profile.documents.store") }}');
           docForm.setAttribute('method', 'POST');
           
           // –£–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ _method –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
           const methodField = docForm.querySelector('input[name="_method"]');
           if (methodField) {
             methodField.remove();
           }
           

           
           // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
           docForm.reset();
           docFiles.value = '';
           filePreview.innerHTML = '';
           
           // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
           docTypeModal.classList.add('hidden');
           docFormModal.classList.remove('hidden');
         });
       });

               // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        function displayExistingPhotos(files, documentId) {
          if (!filePreview) {
            return;
          }
          
          filePreview.innerHTML = '';
          
          if (!files || files.length === 0) {
            filePreview.innerHTML = '<div class="text-gray-500 text-center p-4">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
            return;
          }
          
          files.forEach((file, index) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ file –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            const filePath = typeof file === 'object' ? file.path : file;
            const fileName = typeof file === 'object' ? file.name : `–§–æ—Ç–æ ${index + 1}`;
            
            const photoDiv = document.createElement('div');
            photoDiv.className = 'relative bg-gray-50 rounded border p-2';
            photoDiv.setAttribute('data-photo-index', index);
            photoDiv.setAttribute('data-document-id', documentId);
            photoDiv.innerHTML = `
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm font-medium text-gray-700">${fileName}</span>
                <button type="button" class="text-red-600 hover:text-red-800 text-sm font-medium delete-photo-btn">
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
              <div class="aspect-square bg-gray-100 rounded overflow-hidden">
                <img src="/storage/${filePath}" alt="${fileName}" class="w-full h-full object-cover">
              </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            const deleteBtn = photoDiv.querySelector('.delete-photo-btn');
            deleteBtn.addEventListener('click', (e) => {
              e.preventDefault();
              showDeletePhotoConfirmation(documentId, index, fileName);
            });
            
            filePreview.appendChild(photoDiv);
          });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        function showDeletePhotoConfirmation(documentId, photoIndex, photoName) {
          const photoDeleteModal = document.getElementById('photoDeleteModal');
          const photoDeleteName = document.getElementById('photoDeleteName');
          const confirmPhotoDeleteBtn = document.getElementById('confirmPhotoDeleteBtn');
          
          if (photoDeleteName) {
            photoDeleteName.textContent = photoName;
          }
          
          photoDeleteModal.classList.remove('hidden');
          
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
          const handleConfirm = () => {
            const photoElement = document.querySelector(`[data-photo-index="${photoIndex}"][data-document-id="${documentId}"]`);
            if (photoElement) {
              deleteExistingPhoto(documentId, photoIndex, photoElement);
            }
            photoDeleteModal.classList.add('hidden');
            confirmPhotoDeleteBtn.removeEventListener('click', handleConfirm);
          };
          
          confirmPhotoDeleteBtn.addEventListener('click', handleConfirm);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        function deleteExistingPhoto(documentId, photoIndex, photoElement) {
          
          fetch(`/profile/documents/${documentId}/photo/${photoIndex}`, {
            method: 'DELETE',
            headers: {
              'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
              photoElement.remove();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ payload
              const documentElement = document.querySelector(`[data-edit-doc="${documentId}"]`)?.closest('.border.border-gray-200.rounded-lg');
              if (documentElement && data.document) {
                const payloadTemplate = documentElement.querySelector('template.payload');
                if (payloadTemplate) {
                  payloadTemplate.innerHTML = JSON.stringify(data.document);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                const photoCountElement = documentElement.querySelector('.text-sm.text-gray-600');
                if (photoCountElement && data.document.files) {
                  photoCountElement.textContent = data.document.files.length > 0 ? `üì∑ ${data.document.files.length} —Ñ–æ—Ç–æ` : '–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
                }
              }
              
              showNotification('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞', 'success');
            } else {
              throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }
          })
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ' + error.message, 'error');
          });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        function addDocumentToList(documentData) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ documentData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (!documentData || !documentData.type) {
            console.error('Invalid document data:', documentData);
            return;
          }
          
          const documentsContainer = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3.gap-4');
          if (!documentsContainer) {
            console.error('Documents container not found');
            return;
          }
          
          const emptyState = documentsContainer.querySelector('.text-center.text-gray-600.col-span-full');
          
          // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (emptyState) {
            emptyState.remove();
          }
          
          const typeNames = {
            'passport': '–ü–∞—Å–ø–æ—Ä—Ç –†–§',
            'foreign_passport': '–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç',
            'driver_license': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞'
          };
          
          const typeIcons = {
            'passport': 'üìÑ',
            'foreign_passport': 'üõÇ',
            'driver_license': 'üöó'
          };
          
          const documentHtml = `
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-center gap-2">
                  <div class="text-2xl">${typeIcons[documentData.type] || 'üìÑ'}</div>
                  <div>
                    <div class="font-semibold text-gray-900">${typeNames[documentData.type] || '–î–æ–∫—É–º–µ–Ω—Ç'}</div>
                    <div class="text-sm text-gray-600">
                      ${documentData.files && documentData.files.length > 0 ? `üì∑ ${documentData.files.length} —Ñ–æ—Ç–æ` : '–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'}
                    </div>
                  </div>
                </div>
                <div class="text-green-600 text-lg">‚úî</div>
              </div>
              
              <div class="flex items-center gap-2">
                <button class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50 text-sm" data-view-doc="${documentData.id}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                  üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                </button>
                <button class="px-3 py-1.5 rounded-md border border-gray-300 hover:bg-gray-50 text-sm" data-edit-doc="${documentData.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                  ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button class="px-3 py-1.5 rounded-md bg-red-600 text-white hover:bg-red-700 text-sm" data-delete-doc="${documentData.id}" title="–£–¥–∞–ª–∏—Ç—å">
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
              
              <template class="payload">
                ${JSON.stringify(documentData)}
              </template>
            </div>
          `;
          
          documentsContainer.insertAdjacentHTML('beforeend', documentHtml);
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
          const newDocument = documentsContainer.lastElementChild;
          setupDocumentHandlers(newDocument);
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        function setupDocumentHandlers(documentElement) {
          if (!documentElement) {
            return;
          }
          
          // –ü—Ä–æ—Å–º–æ—Ç—Ä
          const viewBtn = documentElement.querySelector('[data-view-doc]');
          if (viewBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newViewBtn = viewBtn.cloneNode(true);
            viewBtn.parentNode.replaceChild(newViewBtn, viewBtn);
            
            newViewBtn.addEventListener('click', () => {
              const id = newViewBtn.getAttribute('data-view-doc');
              const payload = documentElement.querySelector('template.payload');
              if (!payload) return;
              
              const data = JSON.parse(payload.innerHTML.trim());
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
              if (!docViewGallery) {
                return;
              }
              
              if (data.files && data.files.length > 0) {
                docViewGallery.innerHTML = data.files.map(file => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ file –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
                  const filePath = typeof file === 'object' ? file.path : file;
                  const fileName = typeof file === 'object' ? file.name : '–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
                  
                  return `
                    <div class="bg-gray-50 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition">
                      <div class="aspect-square bg-gray-100 flex items-center justify-center">
                        <img src="/storage/${filePath}" alt="${fileName}" class="w-full h-full object-cover">
                      </div>
                      <div class="p-3">
                        <div class="text-sm font-medium text-gray-900 truncate">${fileName}</div>
                        <div class="text-xs text-gray-500">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                      </div>
                    </div>
                  `;
                }).join('');
                           } else {
               docViewGallery.innerHTML = '<p class="text-gray-500 text-center col-span-full">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>';
              }
              
              if (docViewModal) {
                docViewModal.classList.remove('hidden');
              }
            });
          }
          
          // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          const editBtn = documentElement.querySelector('[data-edit-doc]');
          if (editBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newEditBtn = editBtn.cloneNode(true);
            if (editBtn.parentNode) {
              editBtn.parentNode.replaceChild(newEditBtn, editBtn);
            } else {
              return;
            }
            
            newEditBtn.addEventListener('click', () => {
              const id = newEditBtn.getAttribute('data-edit-doc');
              const payload = documentElement.querySelector('template.payload');
              if (!payload) {
                return;
              }
              
              try {
                const data = JSON.parse(payload.innerHTML.trim());
                
                const typeNames = {
                  'passport': '–ü–∞—Å–ø–æ—Ä—Ç –†–§',
                  'foreign_passport': '–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç',
                  'driver_license': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞'
                };
                
                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
                const docTypeField = document.getElementById('docType');
                const docFormTitle = document.getElementById('docFormTitle');
                const docFormSubtitle = document.getElementById('docFormSubtitle');
                const docFormElement = document.getElementById('docForm');
                
                if (!docFormElement) {
                  return;
                }
                
                let methodField = docFormElement.querySelector('input[name="_method"]');
                
                if (!methodField) {
                  methodField = document.createElement('input');
                  methodField.type = 'hidden';
                  methodField.name = '_method';
                  methodField.value = 'POST';
                  docFormElement.appendChild(methodField);
                }
                
                if (!docTypeField || !docFormTitle || !docFormSubtitle) {
                  console.error('Some form elements not found:', {
                    docTypeField: !!docTypeField,
                    docFormTitle: !!docFormTitle,
                    docFormSubtitle: !!docFormSubtitle
                  });
                  return;
                }
                
                docTypeField.value = data.type;
                docFormTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏';
                docFormSubtitle.textContent = typeNames[data.type];
                methodField.value = 'PUT';
                docFormElement.setAttribute('action', `/profile/documents/${id}`);
                

                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                if (docFiles) {
                  docFiles.value = '';
                }
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                displayExistingPhotos(data.files || [], id);
                
                if (docFormModal) {
                  docFormModal.classList.remove('hidden');
                } else {
                  console.error('docFormModal not found');
                }
              } catch (error) {
                console.error('Error parsing document data:', error);
              }
            });
          }
          
                     // –£–¥–∞–ª–µ–Ω–∏–µ
           const deleteBtn = documentElement.querySelector('[data-delete-doc]');
           if (deleteBtn) {
             // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
             const newDeleteBtn = deleteBtn.cloneNode(true);
             deleteBtn.parentNode.replaceChild(newDeleteBtn, deleteBtn);
             
                          newDeleteBtn.addEventListener('click', () => {
               const id = newDeleteBtn.getAttribute('data-delete-doc');
               
               // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
               if (docDeleteModal) {
                 docDeleteModal.classList.remove('hidden');
               } else {
                 return;
               }
               
               // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
               const confirmBtn = document.getElementById('confirmDeleteBtn');
               const newConfirmBtn = confirmBtn.cloneNode(true);
               confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
               
               // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
               newConfirmBtn.addEventListener('click', () => {
                 fetch(`/profile/documents/${id}`, {
                   method: 'DELETE',
                   headers: {
                     'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                     'X-Requested-With': 'XMLHttpRequest'
                   }
                 })
                 .then(response => {
                   if (!response.ok) {
                     throw new Error(`HTTP error! status: ${response.status}`);
                   }
                   return response.json();
                 })
                 .then(data => {
                   if (data.success) {
                     // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                     if (docDeleteModal) {
                       docDeleteModal.classList.add('hidden');
                     }
                     // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
                     documentElement.remove();
                     
                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                     showNotification('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                     
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                     const documentsContainer = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3.gap-4');
                     if (documentsContainer) {
                       const remainingDocuments = documentsContainer.querySelectorAll('.border.border-gray-200.rounded-lg');
                                            if (remainingDocuments.length === 0) {
                         documentsContainer.innerHTML = `
                           <div class="text-center text-gray-600 py-10 col-span-full">
                             <div class="text-5xl mb-3">üóÇÔ∏è</div>
                             <div>–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                           </div>
                         `;
                       }
                     } else {
                       console.error('documentsContainer not found');
                     }
                     
                     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
                     if (typeof updateAddDocumentButton === 'function') {
                       updateAddDocumentButton();
                     } else {
                       console.error('updateAddDocumentButton function not found');
                     }
                   } else {
                     throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                   }
                 })
                 .catch(error => {
                   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
                   showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message, 'error');
                 });
               });
             });
          }
        }
        
                 // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
         function updateAddDocumentButton() {
           const addDocumentBtn = document.getElementById('addDocumentBtn');
           if (!addDocumentBtn) return;
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
           const existingDocuments = document.querySelectorAll('[data-view-doc]');
           const existingTypes = new Set();
           
           existingDocuments.forEach(btn => {
             const documentElement = btn.closest('.border');
             const payload = documentElement.querySelector('template.payload');
             if (payload) {
               try {
                 const data = JSON.parse(payload.innerHTML.trim());
                 existingTypes.add(data.type);
               } catch (e) {
                 console.error('Error parsing document data:', e);
               }
             }
           });
           
           // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ 3 —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
           if (existingTypes.size >= 3) {
             addDocumentBtn.disabled = true;
             addDocumentBtn.textContent = '–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã';
             addDocumentBtn.classList.add('opacity-50', 'cursor-not-allowed');
             addDocumentBtn.classList.remove('hover:bg-blue-700');
           } else {
             addDocumentBtn.disabled = false;
             addDocumentBtn.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
             addDocumentBtn.classList.remove('opacity-50', 'cursor-not-allowed');
             addDocumentBtn.classList.add('hover:bg-blue-700');
           }
         }
        


       // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
       if (docFiles) {
         docFiles.addEventListener('change', function(e) {
           filePreview.innerHTML = '';
           const files = Array.from(this.files);
           
           files.forEach((file, index) => {
             const fileDiv = document.createElement('div');
             fileDiv.className = 'flex items-center justify-between p-2 bg-gray-50 rounded border';
             
             const fileInfo = document.createElement('div');
             fileInfo.className = 'flex items-center gap-2';
             
             const icon = document.createElement('span');
             icon.textContent = file.type.startsWith('image/') ? 'üñºÔ∏è' : 'üìÑ';
             
             const name = document.createElement('span');
             name.className = 'text-sm';
             name.textContent = file.name;
             
             const size = document.createElement('span');
             size.className = 'text-xs text-gray-500';
             size.textContent = `(${(file.size / 1024 / 1024).toFixed(1)} –ú–ë)`;
             
             fileInfo.appendChild(icon);
             fileInfo.appendChild(name);
             fileInfo.appendChild(size);
             
             const removeBtn = document.createElement('button');
             removeBtn.type = 'button';
             removeBtn.className = 'text-red-600 hover:text-red-700 text-sm';
             removeBtn.textContent = 'üóëÔ∏è';
             removeBtn.onclick = () => {
               fileDiv.remove();
               // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FileList –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
               const dt = new DataTransfer();
               Array.from(this.files).forEach((f, i) => {
                 if (i !== index) dt.items.add(f);
               });
               this.files = dt.files;
             };
             
             fileDiv.appendChild(fileInfo);
             fileDiv.appendChild(removeBtn);
             filePreview.appendChild(fileDiv);
           });
         });
       }

             // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (docForm) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldHandler = docForm._submitHandler;
        if (oldHandler) {
          docForm.removeEventListener('submit', oldHandler);
        }
         
         // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
         docForm._submitHandler = function(e) {
           e.preventDefault();
           
           const formData = new FormData(this);
           const submitBtn = this.querySelector('button[type="submit"]');
           const originalText = submitBtn.textContent;
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è _method –≤ DOM
           const methodFieldInDOM = this.querySelector('input[name="_method"]');
           
           submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
           submitBtn.disabled = true;
           fetch(this.action, {
             method: 'POST',
             body: formData,
             headers: {
               'X-Requested-With': 'XMLHttpRequest'
             }
           })
           .then(response => {
             if (!response.ok) {
               // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON —Å –æ—à–∏–±–∫–æ–π
               return response.json().then(errorData => {
                 throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
               }).catch(() => {
                 throw new Error(`HTTP error! status: ${response.status}`);
               });
             }
             return response.json();
           })
           .then(data => {
             if (data.success) {
               // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
               if (docFormModal) {
                 docFormModal.classList.add('hidden');
               }
               
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                if (docForm) {
                  docForm.reset();
                }
                if (docFiles) {
                  docFiles.value = '';
                }
                if (filePreview) {
                  filePreview.innerHTML = '';
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                const methodField = docForm ? docForm.querySelector('input[name="_method"]') : null;
                const isUpdate = methodField?.value === 'PUT';
                
                if (data.document) {
                  const documentId = data.document.id;
                  const existingDocument = document.querySelector(`[data-edit-doc="${documentId}"]`)?.closest('.border.border-gray-200.rounded-lg');
                  
                  if (existingDocument) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å" –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É)
                    const payloadTemplate = existingDocument.querySelector('template.payload');
                    if (payloadTemplate) {
                      payloadTemplate.innerHTML = JSON.stringify(data.document);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    const photoCountElement = existingDocument.querySelector('.text-sm.text-gray-600');
                    if (photoCountElement && data.document.files) {
                      photoCountElement.textContent = data.document.files.length > 0 ? `üì∑ ${data.document.files.length} —Ñ–æ—Ç–æ` : '–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
                    }
                    
                    const message = isUpdate ? '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É';
                    showNotification(message, 'success');
                  } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    addDocumentToList(data.document);
                    showNotification('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
                  }
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
                if (typeof updateAddDocumentButton === 'function') {
                  updateAddDocumentButton();
                } else {
                  console.error('updateAddDocumentButton function not found');
                }
             } else {
               throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
             }
           })
           .catch(error => {
             console.error('Form submission error:', error);
             console.error('Error message:', error.message);
             console.error('Error stack:', error.stack);
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
             let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
             if (error.message) {
               errorMessage = error.message;
             }
             
             // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
             if (error.errors) {
               const validationErrors = Object.values(error.errors).flat();
               errorMessage = validationErrors.join(', ');
             }
             
             // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å"
             if (errorMessage.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
               errorMessage += '. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.';
             }
             
             showNotification(errorMessage, 'error');
             
             submitBtn.textContent = originalText;
             submitBtn.disabled = false;
           });
         };
         
         // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
         docForm.addEventListener('submit', docForm._submitHandler);
       }







                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
          [docTypeModal, docFormModal, docViewModal, docDeleteModal].forEach(modal => {
           if (modal) {
             modal.querySelectorAll('[data-close]').forEach(el => {
                el.addEventListener('click', () => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                  if (modal && modal.parentNode) {
                    modal.classList.add('hidden');
                  }
                });
             });
             modal.addEventListener('click', (e) => {
                if (e.target === modal && modal && modal.parentNode) {
                  modal.classList.add('hidden');
                }
             });
           }
         });


          
          // –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
          if (contactDeleteModal) {
            contactDeleteModal.addEventListener('click', (e) => {
              if (e.target === contactDeleteModal && contactDeleteModal && contactDeleteModal.parentNode) {
                contactDeleteModal.classList.add('hidden');
              }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contactDeleteModal.querySelectorAll('[data-close]').forEach(closeBtn => {
              closeBtn.addEventListener('click', () => {
                if (contactDeleteModal && contactDeleteModal.parentNode) {
                  contactDeleteModal.classList.add('hidden');
                }
              });
            });
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
          const photoDeleteModal = document.getElementById('photoDeleteModal');
          if (photoDeleteModal) {
            photoDeleteModal.addEventListener('click', (e) => {
              if (e.target === photoDeleteModal && photoDeleteModal && photoDeleteModal.parentNode) {
                photoDeleteModal.classList.add('hidden');
              }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photoDeleteModal.querySelectorAll('[data-close]').forEach(closeBtn => {
              closeBtn.addEventListener('click', () => {
                if (photoDeleteModal && photoDeleteModal.parentNode) {
                  photoDeleteModal.classList.add('hidden');
                }
              });
            });
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          const documentExistsModal = document.getElementById('documentExistsModal');
          if (documentExistsModal) {
            documentExistsModal.addEventListener('click', (e) => {
              if (e.target === documentExistsModal && documentExistsModal && documentExistsModal.parentNode) {
                documentExistsModal.classList.add('hidden');
              }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ "–î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            documentExistsModal.querySelectorAll('[data-close]').forEach(closeBtn => {
              closeBtn.addEventListener('click', () => {
                if (documentExistsModal && documentExistsModal.parentNode) {
                  documentExistsModal.classList.add('hidden');
                }
              });
            });
          }

         // ===== –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ê–ö–¢–û–í =====
         
         // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, ), –ø—Ä–æ–±–µ–ª
         function applyPhoneMask(input) {
           // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, +, -, (, ), –ø—Ä–æ–±–µ–ª
           input.value = input.value.replace(/[^\d+\-()\s]/g, '');
         }

         // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ –≤—Å–µ–º –ø–æ–ª—è–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
         document.querySelectorAll('.phone-mask').forEach(input => {
           input.addEventListener('input', () => applyPhoneMask(input));
         });

         // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
         function closeAllContactEditors() {
           document.querySelectorAll('.contact-edit').forEach(editor => {
             editor.classList.add('hidden');
           });
         }

         // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
         document.querySelectorAll('.contact-edit-btn').forEach(btn => {
           btn.addEventListener('click', (e) => {
             e.preventDefault();
             const contactItem = btn.closest('.contact-item');
             const view = contactItem.querySelector('.contact-view');
             const edit = contactItem.querySelector('.contact-edit');
             
             // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
             closeAllContactEditors();
             
             // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ email
             const contactType = contactItem.getAttribute('data-contact-type');
             const isPrimary = contactItem.getAttribute('data-type') === 'primary';
             
             if (isPrimary && contactType === 'email') {
               const currentEmailDisplay = contactItem.querySelector('.font-semibold');
               const primaryEmailInput = document.getElementById('primaryEmailInput');
               if (currentEmailDisplay && primaryEmailInput) {
                 primaryEmailInput.value = currentEmailDisplay.textContent;
               }
             }
             
             // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
             edit.classList.remove('hidden');
             
             // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
             const firstInput = edit.querySelector('input');
             if (firstInput) {
               setTimeout(() => firstInput.focus(), 100);
             }
           });
         });

         // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         document.querySelectorAll('.contact-cancel-btn').forEach(btn => {
           btn.addEventListener('click', (e) => {
             e.preventDefault();
             const contactItem = btn.closest('.contact-item');
             const edit = contactItem.querySelector('.contact-edit');
             edit.classList.add('hidden');
           });
         });

                   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ)
         document.querySelectorAll('.contact-form').forEach(form => {
           form.addEventListener('submit', function(e) {
             e.preventDefault();
             
             const formData = new FormData(this);
             const submitBtn = this.querySelector('button[type="submit"]');
             const originalText = submitBtn.textContent;
             const contactItem = this.closest('.contact-item');
             const view = contactItem.querySelector('.contact-view');
             const edit = contactItem.querySelector('.contact-edit');
             const contactType = this.getAttribute('data-contact-type');
             
             submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
             submitBtn.disabled = true;
             
             fetch(this.action, {
               method: 'POST',
               body: formData,
               headers: {
                 'X-Requested-With': 'XMLHttpRequest',
                 'Accept': 'application/json'
               }
             })
             .then(response => {

               
               if (!response.ok) {
                 throw new Error(`HTTP error! status: ${response.status}`);
               }
               
               const contentType = response.headers.get('content-type');
               if (contentType && contentType.includes('application/json')) {
                 return response.json();
               } else {
                 throw new Error('Server returned HTML instead of JSON');
               }
             })
             .then(data => {
               if (data.success) {
                 // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                 const valueDiv = view.querySelector('.font-semibold');
                 const commentDiv = view.querySelector('.text-sm.text-gray-500');
                 
                 if (contactType === 'phone') {
                    valueDiv.textContent = data.value || data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω';
                 } else {
                   valueDiv.textContent = data.value || data.email;
                    
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π email, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
                    const contactItem = this.closest('.contact-item');
                    if (contactItem && contactItem.getAttribute('data-type') === 'primary') {
                      const loginSpan = document.querySelector('#loginDisplay span');
                      if (loginSpan) {
                        loginSpan.textContent = data.value || data.email;
                      }
                    }
                 }
                 
                 if (data.comment) {
                   if (commentDiv) {
                     commentDiv.textContent = data.comment;
                   } else {
                     const newCommentDiv = document.createElement('div');
                     newCommentDiv.className = 'text-sm text-gray-500';
                     newCommentDiv.textContent = data.comment;
                     valueDiv.parentNode.appendChild(newCommentDiv);
                   }
                 } else if (commentDiv) {
                   commentDiv.remove();
                 }
                 
                                   // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
                  edit.classList.add('hidden');
                  
                                     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                   showNotification('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
                   
                   submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                   setTimeout(() => {
                     submitBtn.textContent = originalText;
                     submitBtn.disabled = false;
                   }, 2000);
                 } else {
                   throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                 }
               })
               .catch(error => {
                 console.error('–û—à–∏–±–∫–∞:', error);
                 
                 let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞';
                 if (error.message.includes('HTML instead of JSON')) {
                   errorMessage = '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.';
                 } else if (error.message.includes('HTTP error')) {
                   errorMessage = `–û—à–∏–±–∫–∞ HTTP: ${error.message}`;
                 }
                 
                 showNotification(errorMessage, 'error');
                 submitBtn.textContent = '–û—à–∏–±–∫–∞!';
                 setTimeout(() => {
                   submitBtn.textContent = originalText;
                   submitBtn.disabled = false;
                 }, 2000);
               });
           });
         });

         // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
         document.querySelectorAll('.contact-delete-btn').forEach(btn => {
           btn.addEventListener('click', (e) => {
             e.preventDefault();
             const contactItem = btn.closest('.contact-item');
             const contactId = contactItem.getAttribute('data-id');
             const contactType = contactItem.getAttribute('data-contact-type');
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
             contactDeleteModal.classList.remove('hidden');
             
             // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
             document.getElementById('confirmContactDeleteBtn').onclick = () => {
               const deleteUrl = contactType === 'phone' 
                 ? `/profile/phones/${contactId}`
                 : `/profile/emails/${contactId}`;
               
               fetch(deleteUrl, {
                 method: 'DELETE',
                 headers: {
                   'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                   'X-Requested-With': 'XMLHttpRequest',
                   'Accept': 'application/json'
                 }
               })
               .then(response => response.json())
               .then(data => {
                                     if (data.success) {
                      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
                      contactItem.remove();
                      
                      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                      contactDeleteModal.classList.add('hidden');
                      
                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                      showNotification('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                      
                       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                       const remainingContacts = additionalContacts.querySelectorAll('.contact-item[data-id]');
                       if (remainingContacts.length === 0) {
                         additionalContacts.innerHTML = `
                           <div class="text-center text-gray-600 py-8">
                             <div class="text-4xl mb-2">üì≠</div>
                             <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                           </div>
                         `;
                       }
                    } else {
                      throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞', 'error');
                    contactDeleteModal.classList.add('hidden');
                  });
             };
              
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ
           });
         });

         // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
         const addPhoneBtn = document.getElementById('addPhoneBtn');
         const addEmailBtn = document.getElementById('addEmailBtn');
         const additionalContacts = document.getElementById('additionalContacts');

         function createNewContactItem(type) {
           const isPhone = type === 'phone';
           const icon = isPhone ? 'üì±' : '‚úâÔ∏è';
           const placeholder = isPhone ? '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' : 'you@example.com';
           const inputType = isPhone ? 'tel' : 'email';
           const inputClass = isPhone ? 'phone-mask' : '';
           const inputName = isPhone ? 'value' : 'value';
           
                       const newContactHtml = `
              <div class="contact-item border border-gray-200 rounded-lg p-4 bg-gray-50 hover:shadow-sm transition min-h-[80px]" data-type="additional" data-contact-type="${type}">
               <div class="contact-edit">
                 <form class="contact-form" action="{{ route('profile.phones.store') }}" method="post" data-contact-type="${type}">@csrf
                   <div class="space-y-3">
                     <div>
                       <label class="block text-sm font-medium text-gray-700 mb-1">${isPhone ? '–¢–µ–ª–µ—Ñ–æ–Ω' : 'Email'}</label>
                       <input type="${inputType}" name="${inputName}" class="w-full border border-gray-300 rounded-md px-3 py-2 ${inputClass}" placeholder="${placeholder}" required>
                     </div>
                     <div>
                       <label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                       <input type="text" name="comment" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                     </div>
                     ${!isPhone ? `
                     <div>
                       <label class="inline-flex items-center gap-2 text-sm text-gray-700">
                         <input type="checkbox" name="is_primary" value="1"> –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                       </label>
                     </div>
                     ` : ''}
                   </div>
                   <div class="mt-3 flex justify-end gap-2">
                     <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                     <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                   </div>
                 </form>
               </div>
             </div>
           `;
           
           return newContactHtml;
         }

                   if (addPhoneBtn) {
            addPhoneBtn.addEventListener('click', () => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
              const existingPhone = additionalContacts.querySelector('[data-contact-type="phone"]');
              if (existingPhone) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showNotification('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.', 'info');
                return;
              }
              
              // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
              const emptyStates = additionalContacts.querySelectorAll('.text-center.text-gray-600');
              emptyStates.forEach(state => state.remove());
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
              closeAllContactEditors();
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ (—Ç–µ–ª–µ—Ñ–æ–Ω –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É)
              const newContactHtml = createNewContactItem('phone');
              additionalContacts.insertAdjacentHTML('afterbegin', newContactHtml);
             
             // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
             const newContact = additionalContacts.firstElementChild;
             
             // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, ), –ø—Ä–æ–±–µ–ª
             const phoneInput = newContact.querySelector('.phone-mask');
             if (phoneInput) {
               phoneInput.addEventListener('input', () => applyPhoneMask(phoneInput));
               setTimeout(() => phoneInput.focus(), 100);
             }
             
             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
             const cancelBtn = newContact.querySelector('.contact-cancel-btn');
             cancelBtn.addEventListener('click', () => {
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
               if (newContact && newContact.parentNode) {
               newContact.remove();
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 const existingContacts = additionalContacts.querySelectorAll('.contact-item[data-id]');
                 if (existingContacts.length === 0) {
                 additionalContacts.innerHTML = `
                   <div class="text-center text-gray-600 py-8">
                     <div class="text-4xl mb-2">üì≠</div>
                     <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                   </div>
                 `;
                 }
               }
             });
             
             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
             const form = newContact.querySelector('.contact-form');
             form.addEventListener('submit', function(e) {
               e.preventDefault();
               
               const formData = new FormData(this);
               const submitBtn = this.querySelector('button[type="submit"]');
               const originalText = submitBtn.textContent;
               
               submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
               submitBtn.disabled = true;
               
               fetch(this.action, {
                 method: 'POST',
                 body: formData,
                 headers: {
                   'X-Requested-With': 'XMLHttpRequest',
                   'Accept': 'application/json'
                 }
               })
               .then(response => response.json())
               .then(data => {
                 if (data.success) {
                   // –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                   const contactHtml = `
                     <div class="contact-view flex items-start justify-between gap-3">
                       <div class="flex items-center gap-3">
                         <div class="text-xl">üì±</div>
                         <div>
                           <div class="font-semibold text-gray-900">${data.value || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                           ${data.comment ? `<div class="text-sm text-gray-500">${data.comment}</div>` : ''}
                         </div>
                       </div>
                       <div class="flex items-center gap-2">
                         <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                         <button type="button" class="contact-delete-btn text-red-600 hover:text-red-700" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
                       </div>
                     </div>
                     
                     <div class="contact-edit hidden mt-3">
                       <form class="contact-form" action="{{ route('profile.phones.update', '__ID__') }}" method="post" data-contact-type="phone">@csrf @method('PUT')
                         <div class="space-y-3">
                           <div>
                             <label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                             <input type="tel" name="value" value="${data.value}" class="w-full border border-gray-300 rounded-md px-3 py-2 phone-mask" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" required>
                           </div>
                           <div>
                             <label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                             <input type="text" name="comment" value="${data.comment || ''}" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                           </div>
                         </div>
                         <div class="mt-3 flex justify-end gap-2">
                           <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                           <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                         </div>
                       </form>
                     </div>
                   `;
                   
                   newContact.innerHTML = contactHtml;
                   newContact.setAttribute('data-id', data.id);
                   
                   // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞–≤–µ—Ä—Ö
                   additionalContacts.insertBefore(newContact, additionalContacts.firstChild);
                   
                   // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                   sortContacts();
                   
                   // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                   setupContactHandlers(newContact);
                   
                   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
                   showNotification('–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
                   
                   submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                   setTimeout(() => {
                     submitBtn.textContent = originalText;
                     submitBtn.disabled = false;
                   }, 2000);
                 } else {
                   throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                 }
               })
               .catch(error => {
                 console.error('–û—à–∏–±–∫–∞:', error);
                 showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
                 submitBtn.textContent = '–û—à–∏–±–∫–∞!';
                 setTimeout(() => {
                   submitBtn.textContent = originalText;
                   submitBtn.disabled = false;
                 }, 2000);
               });
             });
           });
         }

                   if (addEmailBtn) {
            addEmailBtn.addEventListener('click', () => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π email
              const existingEmail = additionalContacts.querySelector('[data-contact-type="email"]');
              if (existingEmail) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showNotification('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π email. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.', 'info');
                return;
              }
              
              // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
              const emptyStates = additionalContacts.querySelectorAll('.text-center.text-gray-600');
              emptyStates.forEach(state => state.remove());
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
              closeAllContactEditors();
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü (email –≤—Å–µ–≥–¥–∞ —Å–Ω–∏–∑—É)
              const newContactHtml = createNewContactItem('email');
              additionalContacts.insertAdjacentHTML('beforeend', newContactHtml);
             
             // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
             const newContact = additionalContacts.lastElementChild;
             
             // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
             const emailInput = newContact.querySelector('input[type="email"]');
             if (emailInput) {
               setTimeout(() => emailInput.focus(), 100);
             }
             
             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
             const cancelBtn = newContact.querySelector('.contact-cancel-btn');
             cancelBtn.addEventListener('click', () => {
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
               if (newContact && newContact.parentNode) {
               newContact.remove();
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 const existingContacts = additionalContacts.querySelectorAll('.contact-item[data-id]');
                 if (existingContacts.length === 0) {
                 additionalContacts.innerHTML = `
                   <div class="text-center text-gray-600 py-8">
                     <div class="text-4xl mb-2">üì≠</div>
                     <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                   </div>
                 `;
                 }
               }
             });
             
             // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
             const form = newContact.querySelector('.contact-form');
             form.setAttribute('action', '{{ route("profile.emails.store") }}');
             form.addEventListener('submit', function(e) {
               e.preventDefault();
               
               const formData = new FormData(this);
               const submitBtn = this.querySelector('button[type="submit"]');
               const originalText = submitBtn.textContent;
               
               submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
               submitBtn.disabled = true;
               
               fetch(this.action, {
                 method: 'POST',
                 body: formData,
                 headers: {
                   'X-Requested-With': 'XMLHttpRequest',
                   'Accept': 'application/json'
                 }
               })
               .then(response => response.json())
               .then(data => {
                 if (data.success) {
                   // –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                   const contactHtml = `
                     <div class="contact-view flex items-start justify-between gap-3">
                       <div class="flex items-center gap-3">
                         <div class="text-xl">‚úâÔ∏è</div>
                         <div>
                           <div class="font-semibold text-gray-900">${data.value}</div>
                           ${data.comment ? `<div class="text-sm text-gray-500">${data.comment}</div>` : ''}
                         </div>
                       </div>
                       <div class="flex items-center gap-2">
                         <button type="button" class="contact-edit-btn text-blue-600 hover:text-blue-700" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                         <button type="button" class="contact-delete-btn text-red-600 hover:text-red-700" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
                       </div>
                     </div>
                     
                     <div class="contact-edit hidden mt-3">
                       <form class="contact-form" action="{{ route('profile.emails.update', '__ID__') }}" method="post" data-contact-type="email">@csrf @method('PUT')
                         <div class="space-y-3">
                           <div>
                             <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                             <input type="email" name="value" value="${data.value}" class="w-full border border-gray-300 rounded-md px-3 py-2" required>
                           </div>
                           <div>
                             <label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                             <input type="text" name="comment" value="${data.comment || ''}" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                           </div>
                           <div>
                             <label class="inline-flex items-center gap-2 text-sm text-gray-700">
                               <input type="checkbox" name="is_primary" value="1" ${data.is_primary ? 'checked' : ''}> –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                             </label>
                           </div>
                         </div>
                         <div class="mt-3 flex justify-end gap-2">
                           <button type="button" class="contact-cancel-btn px-3 py-2 rounded-md border border-gray-300 hover:bg-gray-50 text-sm">–û—Ç–º–µ–Ω–∞</button>
                           <button type="submit" class="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                         </div>
                       </form>
                     </div>
                   `;
                   
                   newContact.innerHTML = contactHtml;
                   newContact.setAttribute('data-id', data.id);
                   
                   // Email –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ (–Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º)
                   
                   // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                   sortContacts();
                   
                   // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                   setupContactHandlers(newContact);
                   
                   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
                   showNotification('Email —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
                   
                   submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                   setTimeout(() => {
                     submitBtn.textContent = originalText;
                     submitBtn.disabled = false;
                   }, 2000);
                 } else {
                   throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                 }
               })
               .catch(error => {
                 console.error('–û—à–∏–±–∫–∞:', error);
                 showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email', 'error');
                 submitBtn.textContent = '–û—à–∏–±–∫–∞!';
                 setTimeout(() => {
                   submitBtn.textContent = originalText;
                   submitBtn.disabled = false;
                 }, 2000);
               });
             });
           });
         }

         // –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
         function setupContactHandlers(contactItem) {
           // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
           const editBtn = contactItem.querySelector('.contact-edit-btn');
           if (editBtn) {
             editBtn.addEventListener('click', (e) => {
               e.preventDefault();
               const view = contactItem.querySelector('.contact-view');
               const edit = contactItem.querySelector('.contact-edit');
               
               closeAllContactEditors();
               edit.classList.remove('hidden');
               
               const firstInput = edit.querySelector('input');
               if (firstInput) {
                 setTimeout(() => firstInput.focus(), 100);
               }
             });
           }
           
           // –û—Ç–º–µ–Ω–∞
           const cancelBtn = contactItem.querySelector('.contact-cancel-btn');
           if (cancelBtn) {
             cancelBtn.addEventListener('click', (e) => {
               e.preventDefault();
               const edit = contactItem.querySelector('.contact-edit');
               edit.classList.add('hidden');
             });
           }
           
           // –£–¥–∞–ª–µ–Ω–∏–µ
           const deleteBtn = contactItem.querySelector('.contact-delete-btn');
           if (deleteBtn) {
             deleteBtn.addEventListener('click', (e) => {
               e.preventDefault();
               const contactId = contactItem.getAttribute('data-id');
               const contactType = contactItem.getAttribute('data-contact-type');
               
               contactDeleteModal.classList.remove('hidden');
               
               document.getElementById('confirmContactDeleteBtn').onclick = () => {
                 const deleteUrl = contactType === 'phone' 
                   ? `/profile/phones/${contactId}`
                   : `/profile/emails/${contactId}`;
                 
                 fetch(deleteUrl, {
                   method: 'DELETE',
                   headers: {
                     'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                     'X-Requested-With': 'XMLHttpRequest',
                     'Accept': 'application/json'
                   }
                 })
                 .then(response => response.json())
                 .then(data => {
                                       if (data.success) {
                      contactItem.remove();
                      contactDeleteModal.classList.add('hidden');
                      
                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                      showNotification('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                      
                       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                       const remainingContacts = additionalContacts.querySelectorAll('.contact-item[data-id]');
                       if (remainingContacts.length === 0) {
                         additionalContacts.innerHTML = `
                           <div class="text-center text-gray-600 py-8">
                             <div class="text-4xl mb-2">üì≠</div>
                             <div class="text-sm">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</div>
                           </div>
                         `;
                       }
                    } else {
                      throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞', 'error');
                    contactDeleteModal.classList.add('hidden');
                  });
               };
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ
             });
           }
           
           // –§–æ—Ä–º–∞
           const form = contactItem.querySelector('.contact-form');
           if (form) {
             form.addEventListener('submit', function(e) {
               e.preventDefault();
               
               const formData = new FormData(this);
               const submitBtn = this.querySelector('button[type="submit"]');
               const originalText = submitBtn.textContent;
               const view = contactItem.querySelector('.contact-view');
               const edit = contactItem.querySelector('.contact-edit');
               const contactType = this.getAttribute('data-contact-type');
               
               submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
               submitBtn.disabled = true;
               
               fetch(this.action, {
                 method: 'POST',
                 body: formData,
                 headers: {
                   'X-Requested-With': 'XMLHttpRequest',
                   'Accept': 'application/json'
                 }
               })
               .then(response => response.json())
               .then(data => {
                 if (data.success) {
                   const valueDiv = view.querySelector('.font-semibold');
                   const commentDiv = view.querySelector('.text-sm.text-gray-500');
                   
                   if (contactType === 'phone') {
                     valueDiv.textContent = data.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
                   } else {
                     valueDiv.textContent = data.value;
                   }
                   
                   if (data.comment) {
                     if (commentDiv) {
                       commentDiv.textContent = data.comment;
                     } else {
                       const newCommentDiv = document.createElement('div');
                       newCommentDiv.className = 'text-sm text-gray-500';
                       newCommentDiv.textContent = data.comment;
                       valueDiv.parentNode.appendChild(newCommentDiv);
                     }
                   } else if (commentDiv) {
                     commentDiv.remove();
                   }
                   
                   edit.classList.add('hidden');
                   
                   submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                   setTimeout(() => {
                     submitBtn.textContent = originalText;
                     submitBtn.disabled = false;
                   }, 2000);
                 } else {
                   throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                 }
               })
               .catch(error => {
                 console.error('–û—à–∏–±–∫–∞:', error);
                 submitBtn.textContent = '–û—à–∏–±–∫–∞!';
                 setTimeout(() => {
                   submitBtn.textContent = originalText;
                   submitBtn.disabled = false;
                 }, 2000);
               });
             });
           }
           
           // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, ), –ø—Ä–æ–±–µ–ª
           const phoneInput = contactItem.querySelector('.phone-mask');
           if (phoneInput) {
             phoneInput.addEventListener('input', () => applyPhoneMask(phoneInput));
           }
         }

                           // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ email –∏ –ª–æ–≥–∏–Ω–∞
        function syncEmailAndLogin(newEmail, source) {
          // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π email, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
          if (source === 'primary-email') {
            const loginSpan = document.querySelector('#loginDisplay span');
            if (loginSpan) {
              loginSpan.textContent = newEmail;
            }
          }
          // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–æ–≥–∏–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π email
          else if (source === 'login') {
            const primaryEmailDiv = document.querySelector('[data-type="primary"][data-contact-type="email"] .font-semibold');
            if (primaryEmailDiv) {
              primaryEmailDiv.textContent = newEmail;
            }
          }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ç–µ–ª–µ—Ñ–æ–Ω —Å–≤–µ—Ä—Ö—É, email —Å–Ω–∏–∑—É)
        function sortContacts() {
            const contacts = additionalContacts.querySelectorAll('.contact-item[data-id]');
            const phones = [];
            const emails = [];
            
            contacts.forEach(contact => {
              const type = contact.getAttribute('data-contact-type');
              if (type === 'phone') {
                phones.push(contact);
              } else if (type === 'email') {
                emails.push(contact);
              }
            });
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –ø–æ—Ç–æ–º email
            phones.forEach(phone => additionalContacts.appendChild(phone));
            emails.forEach(email => additionalContacts.appendChild(email));
          }
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          sortContacts();

         // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
         document.addEventListener('keydown', (e) => {
           const activeContactEdit = document.querySelector('.contact-edit:not(.hidden)');
           if (activeContactEdit) {
             if (e.key === 'Enter' && e.ctrlKey) {
               e.preventDefault();
               const submitBtn = activeContactEdit.querySelector('button[type="submit"]');
               if (submitBtn) submitBtn.click();
             } else if (e.key === 'Escape') {
               e.preventDefault();
               const cancelBtn = activeContactEdit.querySelector('.contact-cancel-btn');
               if (cancelBtn) cancelBtn.click();
             }
           }
         });

               // AJAX –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
          profileForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            submitBtn.disabled = true;
            
            fetch(this.action, {
              method: 'POST',
              body: formData,
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              }
            })
            .then(response => {
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
            })
            .then(data => {
              if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                const inputs = this.querySelectorAll('input[name]');
                inputs.forEach(input => {
                  const name = input.getAttribute('name');
                  if (data.profile && data.profile[name] !== undefined) {
                    if (name === 'birth_date' && data.profile[name]) {
                      input.value = data.profile[name];
                    } else {
                      input.value = data.profile[name] || '';
                    }
                  }
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                setTimeout(() => {
                  submitBtn.textContent = originalText;
                  submitBtn.disabled = false;
                }, 2000);
              } else {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              }
            })
            .catch(error => {
              console.error('–û—à–∏–±–∫–∞:', error);
              console.error('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
              submitBtn.textContent = '–û—à–∏–±–∫–∞!';
              setTimeout(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
              }, 2000);
            });
          });
        }

        // –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
        const editLoginBtn = document.getElementById('editLoginBtn');
        const loginDisplay = document.getElementById('loginDisplay');
        const loginEdit = document.getElementById('loginEdit');
        const cancelLoginBtn = document.getElementById('cancelLoginBtn');
        const loginForm = document.getElementById('loginForm');

        if (editLoginBtn) {
          editLoginBtn.addEventListener('click', () => {
             // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
             const currentLogin = loginDisplay.querySelector('span').textContent;
             
             // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
             const loginEmailInput = document.getElementById('loginEmailInput');
             if (loginEmailInput) {
               loginEmailInput.value = currentLogin;
             }
             
            loginDisplay.classList.add('hidden');
            loginEdit.classList.remove('hidden');
          });
        }

        if (cancelLoginBtn) {
          cancelLoginBtn.addEventListener('click', () => {
            loginDisplay.classList.remove('hidden');
            loginEdit.classList.add('hidden');
          });
        }

        if (loginForm) {
          loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            submitBtn.disabled = true;
            
            fetch(this.action, {
              method: 'POST',
              body: formData,
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π email
                const emailSpan = loginDisplay.querySelector('span');
                emailSpan.textContent = data.email;
                 
                 // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π email
                 const primaryEmailDiv = document.querySelector('[data-type="primary"][data-contact-type="email"] .font-semibold');
                 if (primaryEmailDiv) {
                   primaryEmailDiv.textContent = data.email;
                 }
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                loginDisplay.classList.remove('hidden');
                loginEdit.classList.add('hidden');
                
                submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                setTimeout(() => {
                  submitBtn.textContent = originalText;
                  submitBtn.disabled = false;
                }, 2000);
              } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
              }
            })
            .catch(error => {
              console.error('–û—à–∏–±–∫–∞:', error);
              submitBtn.textContent = '–û—à–∏–±–∫–∞!';
              setTimeout(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
              }, 2000);
            });
          });
        }

        // –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const editPasswordBtn = document.getElementById('editPasswordBtn');
        const passwordDisplay = document.getElementById('passwordDisplay');
        const passwordEdit = document.getElementById('passwordEdit');
        const cancelPasswordBtn = document.getElementById('cancelPasswordBtn');
        const passwordForm = document.getElementById('passwordForm');
        const passwordText = document.getElementById('passwordText');

        if (editPasswordBtn) {
          editPasswordBtn.addEventListener('click', () => {
            passwordDisplay.classList.add('hidden');
            passwordEdit.classList.remove('hidden');
          });
        }

        if (cancelPasswordBtn) {
          cancelPasswordBtn.addEventListener('click', () => {
            passwordDisplay.classList.remove('hidden');
            passwordEdit.classList.add('hidden');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            passwordForm.reset();
          });
        }

        if (passwordForm) {
          passwordForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            submitBtn.disabled = true;
            
            fetch(this.action, {
              method: 'POST',
              body: formData,
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                passwordDisplay.classList.remove('hidden');
                passwordEdit.classList.add('hidden');
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                passwordForm.reset();
                
                submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                setTimeout(() => {
                  submitBtn.textContent = originalText;
                  submitBtn.disabled = false;
                }, 2000);
              } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
              }
            })
            .catch(error => {
              console.error('–û—à–∏–±–∫–∞:', error);
              submitBtn.textContent = '–û—à–∏–±–∫–∞!';
              setTimeout(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
              }, 2000);
            });
          });
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');
        const profilePhotoInput = document.getElementById('profilePhotoInput');
        const profilePhotoContainer = document.getElementById('profilePhotoContainer');

        if (uploadPhotoBtn && profilePhotoInput) {
          uploadPhotoBtn.addEventListener('click', () => {
            profilePhotoInput.click();
          });

          profilePhotoInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if (!file.type.startsWith('image/')) {
              showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
              return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
              showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
              return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            const reader = new FileReader();
            reader.onload = function(e) {
              profilePhotoContainer.innerHTML = `<img src="${e.target.result}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="w-full h-full object-cover">`;
            };
            reader.readAsDataURL(file);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const formData = new FormData();
            formData.append('photo', file);
            formData.append('_token', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));

            uploadPhotoBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            uploadPhotoBtn.disabled = true;

            fetch('{{ route("profile.about.updatePhoto") }}', {
              method: 'POST',
              body: formData,
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              }
            })
            .then(response => {
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
            })
                        .then(data => {
              if (data.success) {
                showNotification('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
              } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
              }
            })
            .catch(error => {
              console.error('–û—à–∏–±–∫–∞:', error);
              showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ', 'error');
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              profilePhotoContainer.innerHTML = '<span>üë§</span>';
            })
            .finally(() => {
              uploadPhotoBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ';
              uploadPhotoBtn.disabled = false;
              // –û—á–∏—â–∞–µ–º input
              profilePhotoInput.value = '';
            });
          });
        }

                 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         updateAddDocumentButton();
         
                 // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        const documentsContainer = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3.gap-4');
        if (documentsContainer) {
          const documentElements = documentsContainer.querySelectorAll('.border.border-gray-200.rounded-lg');
          documentElements.forEach((element, index) => {
            setupDocumentHandlers(element);
          });
        }

         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
         const togglePassword = document.getElementById('togglePassword');
        const togglePasswordConfirm = document.getElementById('togglePasswordConfirm');
        const passwordInput = document.getElementById('passwordInput');
        const passwordConfirmInput = document.getElementById('passwordConfirmInput');
        const passwordEye = document.getElementById('passwordEye');
        const passwordEyeSlash = document.getElementById('passwordEyeSlash');
        const passwordConfirmEye = document.getElementById('passwordConfirmEye');
        const passwordConfirmEyeSlash = document.getElementById('passwordConfirmEyeSlash');

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        function togglePasswordVisibility(input, eyeIcon, eyeSlashIcon) {
          if (input.type === 'password') {
            input.type = 'text';
            eyeIcon.classList.add('hidden');
            eyeSlashIcon.classList.remove('hidden');
          } else {
            input.type = 'password';
            eyeIcon.classList.remove('hidden');
            eyeSlashIcon.classList.add('hidden');
          }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
        if (togglePassword && passwordInput && passwordEye && passwordEyeSlash) {
          togglePassword.addEventListener('click', () => {
            togglePasswordVisibility(passwordInput, passwordEye, passwordEyeSlash);
          });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if (togglePasswordConfirm && passwordConfirmInput && passwordConfirmEye && passwordConfirmEyeSlash) {
          togglePasswordConfirm.addEventListener('click', () => {
            togglePasswordVisibility(passwordConfirmInput, passwordConfirmEye, passwordConfirmEyeSlash);
          });
        }

     });

     // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
     function openChangePasswordModal() {
         document.getElementById('changePasswordModal').classList.remove('hidden');
     }

     function closeModal(modalId) {
         document.getElementById(modalId).classList.add('hidden');
     }

     function togglePasswordVisibilityModal(inputId) {
         const input = document.getElementById(inputId);
         const eyeIcon = document.getElementById(inputId + '-eye');
         
         if (input.type === 'password') {
             input.type = 'text';
             eyeIcon.textContent = 'üôà';
         } else {
             input.type = 'password';
             eyeIcon.textContent = 'üëÅÔ∏è';
         }
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
     document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
         e.preventDefault();
         
         const newPassword = document.getElementById('new-password').value;
         const confirmPassword = document.getElementById('confirm-password').value;
         
         if (newPassword !== confirmPassword) {
             alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
             return;
         }
         
         // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
         if (newPassword.length < 8) {
             alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
             return;
         }
         
         if (!/\d/.test(newPassword) || !/[a-zA-Z]/.test(newPassword)) {
             alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã');
             return;
         }
         
         const formData = new FormData(this);
         
         fetch('{{ route("profile.about.updatePassword") }}', {
             method: 'POST',
             headers: {
                 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
             },
             body: formData
         })
         .then(response => response.json())
         .then(data => {
             if (data.success) {
                 alert('–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
                 closeModal('changePasswordModal');
                 this.reset();
             } else {
                 alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
             }
         })
         .catch(error => {
             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', error);
             alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
         });
     });
   </script>
 </div>

 <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è -->
 <div id="changePasswordModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
     <div class="bg-white rounded-xl shadow-xl p-8 w-full max-w-md">
         <!-- –ö—Ä–µ—Å—Ç–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è -->
         <button onclick="closeModal('changePasswordModal')" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
             <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
             </svg>
         </button>
         
         <div class="mb-6">
             <h2 class="text-2xl font-bold text-gray-900 mb-2">–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</h2>
             <p class="text-sm text-gray-500">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
         </div>

         <form id="changePasswordForm" method="POST" action="{{ route('profile.about.updatePassword') }}">
             @csrf
             @method('PUT')
             
             <div class="mb-4">
                 <label for="new-password" class="block text-sm font-medium text-gray-700 mb-2">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                 <div class="relative">
                     <input type="password" id="new-password" name="password" class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                     <button type="button" onclick="togglePasswordVisibilityModal('new-password')" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600">
                         <span id="new-password-eye" class="text-lg">üëÅÔ∏è</span>
                     </button>
                 </div>
             </div>

             <div class="mb-6">
                 <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
                 <div class="relative">
                     <input type="password" id="confirm-password" name="password_confirmation" class="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                     <button type="button" onclick="togglePasswordVisibilityModal('confirm-password')" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600">
                         <span id="confirm-password-eye" class="text-lg">üëÅÔ∏è</span>
                     </button>
                 </div>
             </div>

             <div class="mb-6 p-3 bg-blue-50 rounded-lg">
                 <p class="text-sm text-blue-700">
                     <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</strong><br>
                     ‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤<br>
                     ‚Ä¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞<br>
                     ‚Ä¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
                 </p>
             </div>

             <div class="flex justify-end space-x-3">
                 <button type="button" onclick="closeModal('changePasswordModal')" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                     –û—Ç–º–µ–Ω–∞
                 </button>
                 <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors">
                     –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                 </button>
             </div>
         </form>
     </div>
 </div>


